{"version":3,"sources":["State/State.js","App.js","serviceWorker.js","index.js"],"names":["State","props","manageFavorite","stateId","array","JSON","parse","localStorage","getItem","includes","splice","indexOf","push","setItem","stringify","updateStateForRefresh","document","body","scrollTop","documentElement","state","name","className","active","confirmed","recovered","deaths","favorite","src","alt","onClick","bind","this","stateKey","App","data","response","fetch","method","headers","then","json","setState","catch","err","console","log","refresh","template","favoriteStates","forEach","favState","key","index","length","generateTemplate","href","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f480fb65.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./State.css\";\r\n\r\nfunction State(props) {\r\n\r\n  function manageFavorite(stateId){\r\n    var array = JSON.parse(localStorage.getItem('favorite'));\r\n    if(array.includes(stateId))\r\n      array.splice(array.indexOf(stateId), 1);\r\n    else\r\n      array.push(stateId);\r\n    localStorage.setItem('favorite', JSON.stringify(array));\r\n    props.updateStateForRefresh();\r\n    document.body.scrollTop = 0;\r\n    document.documentElement.scrollTop = 0;\r\n  }\r\n\r\n  var template = [];\r\n  if(props.state.name){\r\n    template = <div className=\"state-square z-depth-4\">\r\n    <div className=\"state-name\">{props.state && props.state.name}</div>\r\n    <div>Active: {props.state && props.state.active}</div>\r\n    <div>Confirmed: {props.state && props.state.confirmed}</div>\r\n    <div>Recovered: {props.state && props.state.recovered}</div>\r\n    <div>Deaths: {props.state && props.state.deaths}</div>\r\n    { props.favorite === true ? \r\n      <img src=\"fav.png\" alt=\"\" className=\"favorite\" onClick={manageFavorite.bind(this, props.stateKey)}></img>\r\n      :\r\n      <img src=\"unfav.png\" alt=\"\" className=\"favorite\" onClick={manageFavorite.bind(this, props.stateKey)}></img>\r\n    }\r\n  </div>\r\n  }\r\n  else{\r\n    template = <div className=\"state-square absolute z-depth-4\"><div className=\"lds-ripple\"><div></div><div></div></div></div>\r\n  }\r\n  \r\n\r\n  return (\r\n    template\r\n  );\r\n}\r\n\r\nexport default State;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport State from \"./State/State\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {\n        response: [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n      },\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://covid19india.p.rapidapi.com/getIndiaStateData\", {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-host\": \"covid19india.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"3563921bccmshc065453cb17903dp1c8ab6jsn2adb9c8dd077\",\n      },\n    })\n      .then((response) => {\n        response.json().then((response) => {\n          this.setState({ data: response });\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n      if(!localStorage.getItem('favorite'))\n        localStorage.setItem('favorite', \"[14]\");\n  }\n\n  updateStateForRefresh(){\n    this.setState({\n      refresh: true\n    })\n  }\n\n  generateTemplate(){\n    var template = [];\n    var favoriteStates = JSON.parse(localStorage.getItem('favorite')) || [];\n\n    favoriteStates.forEach((favState) => {\n      template.push(<State key={favState} stateKey={favState} favorite={true} state={this.state.data.response[favState]} updateStateForRefresh={this.updateStateForRefresh.bind(this)}></State>);\n    });\n\n    for(let index = 0; index < this.state.data.response.length - 1; index++){\n      if(!favoriteStates.includes(index))\n        template.push(<State key={index} state={this.state.data.response[index]} stateKey={index} updateStateForRefresh={this.updateStateForRefresh.bind(this)}></State>);\n    }\n\n    return template;\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h3 className=\"pink lighten-4\">Covid-19</h3>\n        <h5>Live Indian Statewise Updates</h5>\n        <div className=\"\">{this.generateTemplate()}</div>\n        <div className=\"right-bottom\">\n          <div>Developed in ReactJS</div>\n          <div>by <a href=\"https://www.linkedin.com/in/sadananadpai/\">Sadanand Akshay Pai</a></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'materialize-css';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}